# The Ricoh 2A03/2A07 is the SoC used in the NES/FC console.
# It uses the 6502 instruction set minus the BCD support.


### Registers

reg
# accumulator
u8 a
# index registers
u8 x, y
# flags
u1 n, v, b, d, i, z, c
u8& p = n;v;%1;b;d;i;z;c
# stack pointer
u8 s
u16& sp = $01;s
# program counter
u16 pc


### I/O

io
u8 mem[u16]


### Stack access

func push(u8 V)
    mem[sp] := V
    s := s - 1

func pull(u8& D)
    s := s + 1
    D := mem[sp]


### Addressing modes

mode u8 immediate
N                       . \#N           . N                 . u8 N

mode u8& zeropage
A                       . A             . mem[A]            . u8 A

mode u8& zeropage_x
A                       . A,x           . mem[(A+x)[:8]]    . u8 A

mode u8& zeropage_y
A                       . A,y           . mem[(A+y)[:8]]    . u8 A

mode u8& absolute
A[:8], A[8:]            . A             . mem[A]            . u16 A

mode u8& absolute_x
A[:8], A[8:]            . A,x           . mem[A+x]          . u16 A

mode u8& absolute_y
A[:8], A[8:]            . A,y           . mem[A+y]          . u16 A

func u16 indx(u8 A)
    def u8 L = mem[(A+x  )[:8]]
    def u8 H = mem[(A+x+1)[:8]]
    ret := H;L

mode u8& indexed_indirect
A                       . (A,x)         . mem[indx(A)]      . u8 A

func u16 indy(u8 A)
    def u8 L = mem[A]
    def u8 H = mem[(A+1)[:8]]
    ret := H;L + y

mode u8& indirect_indexed
A                       . (A),y         . mem[indy(A)]      . u8 A


### Operand encodings

mode u8& ldstx
%001, A@                . A             .                   . zeropage A
%011, A@                . A             .                   . absolute A
%101, A@                . A             .                   . zeropage_y A

mode u8& ldsty
A,    A@                . A             .                   . ldstx A
%101, A@                . A             .                   . zeropage_x A

mode u8& incdec
A,    A@                . A             .                   . ldsty A
%111, A@                . A             .                   . absolute_x A

mode u8& acc_modes
A,    A@                . A             .                   . incdec A
%000, A@                . A             .                   . indexed_indirect A
%100, A@                . A             .                   . indirect_indexed A
%110, A@                . A             .                   . absolute_y A


### Store

instr
%100;D;%01, D@          . sta D         . D := a            . acc_modes D
%100;D;%10, D@          . stx D         . D := x            . ldstx D
%100;D;%00, D@          . sty D         . D := y            . ldsty D


### Load

func load(u8& D, u8 S)
    D := S
    n := S[7]
    z := S == 0

mode u8& lda
A,    A@                . A             .                   . acc_modes A
%010, N                 . N             .                   . immediate N

mode u8& ldx
A,    A@                . A             .                   . ldstx A
%000, N                 . N             .                   . immediate N
%111, A@                . A             .                   . absolute_y A

mode u8& ldy
A,    A@                . A             .                   . ldsty A
%000, N                 . N             .                   . immediate N
%111, A@                . A             .                   . absolute_x A

instr
%101;S;%01, S@          . lda S         . load(a, S)        . lda S
%101;S;%10, S@          . ldx S         . load(x, S)        . ldx S
%101;S;%00, S@          . ldy S         . load(y, S)        . ldy S


### Transfer

instr
%101;%010;%00           . tay           . load(y, a)
%100;%110;%00           . tya           . load(a, y)
%101;%010;%10           . tax           . load(x, a)
%100;%010;%10           . txa           . load(a, x)
%101;%110;%10           . tsx           . load(x, s)
%100;%110;%10           . txs           . load(s, x)


### Set and clear flags

instr
%000;%110;%00           . clc           . c := 0
%001;%110;%00           . sec           . c := 1
%010;%110;%00           . cli           . i := 0
%011;%110;%00           . sei           . i := 1
%101;%110;%00           . clv           . v := 0
%110;%110;%00           . cld           . d := 0
%111;%110;%00           . sed           . d := 1


### Arithmetic

func add_carry(u8 V)
    c ; var u8 T := a + V + c
    v := !(V[7] ^ a[7]) & (V[7] ^ T[7])
    load(a, T)

instr
%000;S;%01, S@          . ora S         . load(a, a | S)    . acc_modes S
%001;S;%01, S@          . and S         . load(a, a & S)    . acc_modes S
%010;S;%01, S@          . eor S         . load(a, a ^ S)    . acc_modes S
%011;S;%01, S@          . adc S         . add_carry(S)      . acc_modes S
%111;S;%01, S@          . sbc S         . add_carry(~S)     . acc_modes S


### Compare

func compare(u8 A, u8 B)
    c ; var u8 T := A + ~B + 1
    n := T[7]
    z := T == 0

mode u8& cpxy
%000, N                 . N             .                   . immediate N
%001, A                 . A             .                   . zeropage A
%011, A@                . A             .                   . absolute A

instr
%110;V;%01, V@          . cmp V         . compare(a, V)     . acc_modes V
%111;V;%00, V@          . cpx V         . compare(x, V)     . cpxy V
%110;V;%00, V@          . cpy V         . compare(y, V)     . cpxy V


### Increment/decrement

instr
%110;D;%10, D@          . dec D         . load(D, D - 1)    . incdec D
%111;D;%10, D@          . inc D         . load(D, D + 1)    . incdec D
%110;%010;%10           . dex           . load(x, x - 1)
%100;%010;%00           . dey           . load(y, y - 1)
%111;%010;%00           . inx           . load(x, x + 1)
%110;%010;%00           . iny           . load(y, y + 1)


### Rotate/shift

func rotate_l(u8& D, u1 B)
    c ; var u8 T := D ; B
    load(D, T)

func rotate_r(u8& D, u1 B)
    var u8 T ; c := B ; D
    load(D, T)

mode u8& rotate
A, A@                   . A             .                   . incdec A
%010                    . a

instr
%000;D;%10, D@          . asl D         . rotate_l(D, 0)    . rotate D
%010;D;%10, D@          . lsr D         . rotate_r(D, 0)    . rotate D
%001;D;%10, D@          . rol D         . rotate_l(D, c)    . rotate D
%011;D;%10, D@          . ror D         . rotate_r(D, c)    . rotate D


### Bit mask test

func bit(u8 V)
    n := V[7]
    v := V[6]
    z := (V & a) == 0

instr
%001;%001;%00, V        . bit V         . bit(V)            . zeropage V
%001;%011;%00, V@       . bit V         . bit(V)            . absolute V


### Branch

func jmp_indirect(u16 A)
    def u8 L = mem[A]
    # There is no carry on the address increment.
    # TODO: There is no carry on the NMOS version of the 6502, but there is
    #       on the CMOS version; what is it for 2A03?
    def u8 H = mem[A[8:] ; (A + 1)[:8]]
    pc := H ; L

instr
%010;%011;%00, A[:8], A[8:] . jmp A     . pc := A           . u16 A
%011;%011;%00, A[:8], A[8:] . jmp (A)   . jmp_indirect(A)   . u16 A

func jmp_cond(u16 A, u1 F)
    branch !F @skip
    pc := A
    @skip

mode u16 relative
R                       . A             .                   . s8 R, u16 A = pc + R

instr
%000;%100;%00, A        . bpl A         . jmp_cond(A, !n)   . relative A
%001;%100;%00, A        . bmi A         . jmp_cond(A,  n)   . relative A
%010;%100;%00, A        . bvc A         . jmp_cond(A, !v)   . relative A
%011;%100;%00, A        . bvs A         . jmp_cond(A,  v)   . relative A
%100;%100;%00, A        . bcc A         . jmp_cond(A, !c)   . relative A
%101;%100;%00, A        . bcs A         . jmp_cond(A,  c)   . relative A
%110;%100;%00, A        . bne A         . jmp_cond(A, !z)   . relative A
%111;%100;%00, A        . beq A         . jmp_cond(A,  z)   . relative A


### Push and pull

instr
%000;%010;%00           . php           . push(p)
%001;%010;%00           . plp           . pull(p)
%010;%010;%00           . pha           . push(a)
%011;%010;%00           . pla           . pull(a)


### NOP

instr
%111;%010;%10           . nop
