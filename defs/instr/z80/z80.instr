# The Zilog Z80 is an 8-bit microprocessor used in many different machines.
# It was popular in the late 1970s and early 1980s.
#
# The grouping in this instruction set definition matches the sections in Sean
# Young's "The Undocumented Z80 Documented" (maintained by Jan Wilmans).
#   http://www.myquest.nl/z80undocumented/


### Registers

= reg
# flags:
u1  sf  zf  yf  hf  xf  pf  nf  cf
u1  sf' zf' yf' hf' xf' pf' nf' cf'
u8  f   = sf  ; zf  ; yf  ; hf  ; xf  ; pf  ; nf  ; cf
u8  f'  = sf' ; zf' ; yf' ; hf' ; xf' ; pf' ; nf' ; cf'
# main registers:
u8  a   b   c   d   e   h   l
u8  a'  b'  c'  d'  e'  h'  l'
u16 af  = a  ; f
u16 af' = a' ; f'
u16 bc  = b  ; c
u16 bc' = b' ; c'
u16 de  = d  ; e
u16 de' = d' ; e'
u16 hl  = h  ; l
u16 hl' = h' ; l'
# index registers:
u8  ixh ixl iyh iyl
u16 ix  = ixh ; ixl
u16 iy  = iyh ; iyl
# special registers:
u8  i   r
u16 sp  pc
# interrupt flags and mode:
u1  iff1    iff2
u2  im


### I/O

= io
u8 mem[u16]
u8 port[u8]


### Operand mappings

# 16-bit memory access

= func u16 read16(u16 A)
    u8 L := mem[A]
    u8 H := mem[A + 1]
    ret := H ; L

= func write16(u16 A, u16 V)
    mem[A]     := V[0:8]
    mem[A + 1] := V[8:16]
